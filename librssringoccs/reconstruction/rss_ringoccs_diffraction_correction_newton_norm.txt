#include <stdio.h>
#include <stdlib.h>
#include <rss_ringoccs/include/rss_ringoccs_math.h>
#include <rss_ringoccs/include/rss_ringoccs_fresnel_transform.h>
#include <rss_ringoccs/include/rss_ringoccs_reconstruction.h>

/******************************************************************************
 *  Function:                                                                 *
 *      DiffractionCorrectionNewton                                           *
 *  Purpose:                                                                  *
 *      Compute the Fresnel transform using the Newton-Raphson method to      *
 *      compute the stationary value of the Fresnel-Kernel.                   *
 *  Arguments:                                                                *
 *      dlp (DLPObj *):                                                       *
 *          An instance of the DLPObj structure defined in                    *
 *          _diffraction_correction.h. This contains all of the necessary     *
 *          data for diffraction correction, including the geometry of the    *
 *          occultation and actual power and phase data.                      *
 *  Output:                                                                   *
 *      Nothing (void):                                                       *
 *          This is a void function, so no actual output is provided. However *
 *          the T_out pointer within the dlp structure will be changed at the *
 *          end, containing the diffraction correction data.                  *
 *  Notes:                                                                    *
 *      1.) This method is the most accurate, but much slower than the        *
 *          Fresnel and Legendre options. It is accurate for every Rev of the *
 *          Cassini mission with the exception of the Rev133 occultation      *
 *          of which only the Ka band produces accurate results. For X and S  *
 *          bands one needs to use the Perturbed Newton method.               *
 *      2.) The polynomials from the MTR86 are available via the dlp.interp   *
 *          variable. These polynomials are slower and less accurate than the *
 *          normal Newton method since to compute the polynomials the         *
 *          Newton-Raphson method must be performed, and hence the            *
 *          polynomials increase the number of computations needed. The real  *
 *          use of them arises if one uses FFT methods. This routine does NOT *
 *          use FFTs, but rather ordinary integration.                        *
 ******************************************************************************/
void DiffractionCorrectionNewton(rssringoccs_TAUObj *dlp)
{
    /*  Variables for indexing. nw_pts is the number of points in the window. */
    long i, j, nw_pts, center;

    /*  Toler is the number of iterations allowed in Newton-Raphson.          */
    long toler;

    /*  Some variables needed for reconstruction.                             */
    double w_init, dx, two_dx;

    /*  EPS is the maximum allowed error in the Newton-Raphson scheme.        */
    double EPS;

    /*  If everything executes smoothly, status should remain at zero.        */
    dlp->error_occurred = rssringoccs_False;

    /*  Check that the pointers to the data are not NULL.                     */
    check_tau_data(tau);
    if (tau->error_occurred)
        return;

    /*  Cast the selected window type to the fw pointer.                      */
    select_window_func(&fw, tau);
    if (tau->error_occurred)
        return;

    /*  Set toler to 5 and EPS to e-4, reasonable for almost all cases.       */
    toler = 5;
    EPS = 1.E-4;

    /*  Select the correct Fresnel transformation.                            */
    if (dlp->use_norm)
    {
        if (dlp->interp == 0)
            FresT = &Fresnel_Transform_Newton_Norm_Double;
        else if (dlp->interp == 2)
            FresT = &Fresnel_Transform_Quadratic_Norm_Double;
        else if (dlp->interp == 3)
            FresT = &Fresnel_Transform_Cubic_Norm_Double;
        else if (dlp->interp == 4)
            FresT = &Fresnel_Transform_Quartic_Norm_Double;
        else
        {
            /*  Illegal input for interp, return to calling function.         */
            dlp->status = 4;
            return;
        }
    }
    else
    {
        if (dlp->interp == 0)
            FresT = &Fresnel_Transform_Newton_Double;
        else if (dlp->interp == 2)
            FresT = &Fresnel_Transform_Quadratic_Double;
        else if (dlp->interp == 3)
            FresT = &Fresnel_Transform_Cubic_Double;
        else if (dlp->interp == 4)
            FresT = &Fresnel_Transform_Quartic_Double;
        else
        {
            /*  Illegal input for interp, return to calling function.         */
            dlp->status = 4;
            return;
        }
    }

    /* Compute first window width and window function. */
    center = dlp->start;

    /*  If forward tranform is set, negate the kd_vals variable. This has     *
     *  the equivalent effect of computing the forward calculation later.     */
    if (dlp->use_fwd)
    {
        /*  Loop over all of kd_vals and negate the value.                    */
        for (i=0; i <= dlp->n_used; ++i)
        {
            dlp->kd_vals[i] *= -1.0;
        }
    }

    /*  Compute some more variables.                                          */
    w_init  = dlp->w_km_vals[center];
    dx      = dlp->rho_km_vals[center+1] - dlp->rho_km_vals[center];
    two_dx  = 2.0*dx;
    nw_pts  = 2*((long)(w_init / (2.0 * dx)))+1;

    /* Check to ensure you have enough data to the left.                      */
    if (!check_data_range(dlp, two_dx))
    {
        /*  One of the points has too large of a window width to process.     *
         *  Returning with error message.                                     */
        dlp->status = 2;
        return;
    }

    /*  Allocate memory for these required variables.                         */
    double *x_arr   = malloc(sizeof(double) * nw_pts);
    double *phi_arr = malloc(sizeof(double) * nw_pts);
    double *w_func  = malloc(sizeof(double) * nw_pts);

    /*  Check that malloc was successfull.                                    */
    if (!(x_arr) || !(w_func) || !(phi_arr))
    {
        /*  Malloc failed, return to calling function.                        */
        dlp->status = 3;
        return;
    }

    /*  Compute the rho and phi variables, and the window function.           */
    for (j=0; j<nw_pts; ++j)
    {
        x_arr[j]   = dlp->rho_km_vals[center+j-(nw_pts-1)/2];
        phi_arr[j] = dlp->phi_rad_vals[center+j-(nw_pts-1)/2];
        w_func[j]  = fw(x_arr[j] - dlp->rho_km_vals[center], w_init);
    }

    /*  Run diffraction correction point by point.                            */
    for (i=0; i<=dlp->n_used; ++i)
    {
        /*  If the window width changes significantly, recompute w_func.      */
        if (fabs(w_init - dlp->w_km_vals[center]) >= two_dx)
        {
            /* Reset w_init and recompute window function.                    */
            w_init  = dlp->w_km_vals[center];
            nw_pts  = 2*((int)(w_init / (2.0 * dx)))+1;

            /*  Reallocate memory since the sizes have changed.               */
            w_func  = (double *)realloc(w_func,  sizeof(double) * nw_pts);
            phi_arr = (double *)realloc(phi_arr, sizeof(double) * nw_pts);
            x_arr   = (double *)realloc(x_arr,   sizeof(double) * nw_pts);

            /*  Recompute rho, phi, and the window function.                  */
            for (j=0; j<nw_pts; ++j)
            {
                x_arr[j]   = dlp->rho_km_vals[center+j-(nw_pts-1)/2];
                phi_arr[j] = dlp->phi_rad_vals[center+j-(nw_pts-1)/2];
                w_func[j]  = fw(x_arr[j] - dlp->rho_km_vals[center], w_init);
            }
        }
        else
        {
            /*  Adjust rho and phi to the new range.                          */
            for (j=0; j<nw_pts; ++j)
            {
                x_arr[j]   = dlp->rho_km_vals[center+j-(nw_pts-1)/2];
                phi_arr[j] = dlp->phi_rad_vals[center+j-(nw_pts-1)/2];
            }
        }

        /*  Compute the fresnel tranform about the current point.             */
        dlp->T_out[i] = FresT(x_arr, phi_arr, dlp->T_in, w_func,
                              dlp->kd_vals[center], dlp->rho_km_vals[center],
                              dlp->B_rad_vals[center], dlp->D_km_vals[center],
                              EPS, toler, dx, dlp->F_km_vals[center],
                              nw_pts, center);

        /*  Increment pointers using pointer arithmetic.                      */
        center += 1;
    }

    /*  Free variables allocated by malloc.                                   */
    free(x_arr);
    free(phi_arr);
    free(w_func);
}
