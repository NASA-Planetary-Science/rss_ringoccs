/******************************************************************************
 *  Function:                                                                 *
 *      DiffractionCorrectionPerturbedNewton                                  *
 *  Purpose:                                                                  *
 *      Compute the Fresnel transform using the Newton-Raphson method to      *
 *      compute the stationary value of the Fresnel-Kernel. The user may then *
 *      perturb the Fresnel kernel with an arbitrary quartic polynomial.      *
 *  Arguments:                                                                *
 *      dlp (DLPObj *):                                                       *
 *          An instance of the DLPObj structure defined in                    *
 *          _diffraction_correction.h. This contains all of the necessary    *
 *          data for diffraction correction, including the geometry of the    *
 *          occultation and actual power and phase data.                      *
 *  Output:                                                                   *
 *      Nothing (void):                                                       *
 *          This is a void function, so no actual output is provided. However *
 *          the T_out pointer within the dlp structure will be changed at the *
 *          end, containing the diffraction correction data.                  *
 *  Notes:                                                                    *
 *      1.) This method can be very accurate, but requires guess and check    *
 *          work from the user since there is no magical input of polynomials *
 *          that works uniformly. If using for Saturn based data, the Encke   *
 *          gap is your friend. Start with the polynomials set to zero, which *
 *          is just the standard Newton-Raphson method. Then look to the      *
 *          Encke gap which lies between ~132900-134200 km. A good            *
 *          reconstruction should have produced a near perfect square well    *
 *          (see below). If it is not a square well, perturb the cubic and    *
 *          quartic terms until it is. The quadratic term is usually fine and *
 *          the linear term is nearly zero so you most likely do not need to  *
 *          waste time with these.                                            *
 *                                                                            *
 *          Power                                                             *
 *         |                     _________________                            *
 *         |                     |               |                            *
 *         |                     |               |                            *
 *         |                     |               |                            *
 *         |                     |               |                            *
 *         |                     |               |                            *
 *         |                     |               |                            *
 *         | ____________________|               |________________________    *
 *         |                         Encke Gap                                *
 *         |_______________________________________________________________   *
 *                                                                    Radius  *
 ******************************************************************************/
void DiffractionCorrectionPerturbedNewton(DLPObj *dlp)
{
    /*  If everything executes smoothly, status should remain at zero.        */
    dlp->status = 0;

    /*  Check that the pointers to the data are not NULL.                     */
    if (!(check_dlp_data(dlp)))
    {
        /*  One of the variables has null data, return to calling function.   */
        dlp->status = 1;
        return;
    }

    /*  Variables for indexing, nw_pts is the number of points in the window. */
    long i, j, nw_pts, center;

    /*  Maximum number of iterations allowed in Newton-Raphson.               */
    long toler;

    /*  Some more necessary variables.                                        */
    double w_init, dx, two_dx;

    /*  The maximum allowed error in Newton-Raphson.                          */
    double EPS;

    /*  Set toler to 5 and EPS to e-4, both reasonable for almost all cases.  */
    toler = 5;
    EPS = 1.E-4;

    /*  Function pointers for the window function and Fresnel transform.      */
    rss_ringoccs_window_func fw = malloc(sizeof(rss_ringoccs_window_func));
    complex double (*FresT)(double *, double *, complex double *, double *,
                            double, double, double, double, double, long,
                            double, double, long, long, double [5]);

    /*  Cast the selected window type to the fw pointer.                      */
    select_window_func(fw, dlp);
    if (!(dlp->status == 0)) return;

    /*  Select the correct transform function.                                */
    if (dlp->use_norm) FresT = &Fresnel_Transform_Perturbed_Newton_Norm_Double;
    else               FresT = &Fresnel_Transform_Perturbed_Newton_Double;

    /* Compute first window width and window function.                        */
    center = dlp->start;

    /*  If forward calculation is selected, negate kd_vals. This has the same *
     *  effect as computing the forward model.                                */
    if (dlp->use_fwd)
    {
        /*  Loop over kd_vals and negate each term.                           */
        for (i=0; i<=dlp->n_used; ++i)
        {
            dlp->kd_vals[center+i] *= -1.0;
        }
    }

    /*  Compute some more necessary data.                                     */
    w_init  = dlp->w_km_vals[center];
    dx      = dlp->rho_km_vals[center+1] - dlp->rho_km_vals[center];
    two_dx  = 2.0*dx;
    nw_pts  = 2*((long)(w_init / (2.0 * dx)))+1;

    /* Check to ensure you have enough data to the left.                      */
    if (!check_data_range(dlp, two_dx))
    {
        /*  One of the points has too large of a window width to process.     *
         *  Returning with error message.                                     */
        dlp->status = 2;
        return;
    }

    /*  Allocate memory for rho, phi, and the window function.                */
    double *x_arr   = (double *)malloc(sizeof(double) * nw_pts);
    double *phi_arr = (double *)malloc(sizeof(double) * nw_pts);
    double *w_func  = (double *)malloc(sizeof(double) * nw_pts);

    /*  Check that malloc was successfull.                                    */
    if (!(x_arr) || !(w_func) || !(phi_arr))
    {
        /*  Malloc failed, return to calling function.                        */
        dlp->status = 3;
        return;
    }

    /*  Compute rho, phi, and the window function.                            */
    for (j=0; j<nw_pts; ++j)
    {
        x_arr[j]   = dlp->rho_km_vals[center+j-(nw_pts-1)/2];
        phi_arr[j] = dlp->phi_rad_vals[center+j-(nw_pts-1)/2];
        w_func[j]  = fw(x_arr[j] - dlp->rho_km_vals[center], w_init);
    }

    for (i=0; i<=dlp->n_used; ++i)
    {
        /*  If the window width changes significantly, recompute w_func.      */
        if (fabs(w_init - dlp->w_km_vals[center]) >= two_dx)
        {
            /* Reset w_init and recompute window function.                    */
            w_init  = dlp->w_km_vals[center];
            nw_pts  = 2*((int)(w_init / (2.0 * dx)))+1;

            /*  Reallocate memory since the sizes changed.                    */
            w_func  = (double *)realloc(w_func,  sizeof(double) * nw_pts);
            phi_arr = (double *)realloc(phi_arr, sizeof(double) * nw_pts);
            x_arr   = (double *)realloc(x_arr,   sizeof(double) * nw_pts);

            /*  Recompute rho, phi, and the window function.                  */
            for (j=0; j<nw_pts; ++j)
            {
                x_arr[j]   = dlp->rho_km_vals[center+j-(nw_pts-1)/2];
                phi_arr[j] = dlp->phi_rad_vals[center+j-(nw_pts-1)/2];
                w_func[j]  = fw(x_arr[j] - dlp->rho_km_vals[center], w_init);
            }
        }
        else
        {
            /*  Compute rho and phi about the new range.                      */
            for (j=0; j<nw_pts; ++j)
            {
                x_arr[j]   = dlp->rho_km_vals[center+j-(nw_pts-1)/2];
                phi_arr[j] = dlp->phi_rad_vals[center+j-(nw_pts-1)/2];
            }
        }

        /*  Compute the fresnel tranform about the current point.             */
        dlp->T_out[i] = FresT(x_arr, phi_arr, dlp->T_in, w_func,
                              dlp->kd_vals[center], dlp->rho_km_vals[center],
                              dlp->B_rad_vals[center], dlp->D_km_vals[center],
                              EPS, toler, dx, dlp->F_km_vals[center],
                              nw_pts, center, dlp->perturb);

        /*  Increment pointers using pointer arithmetic.                      */
        center += 1;
    }

    /*  Free variables allocated by malloc.                                   */
    free(x_arr);
    free(phi_arr);
    free(w_func);
}
